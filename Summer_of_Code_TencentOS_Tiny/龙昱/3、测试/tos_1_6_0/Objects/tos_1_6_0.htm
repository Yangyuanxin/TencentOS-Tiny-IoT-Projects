<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\tos_1_6_0.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\tos_1_6_0.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Wed Sep 08 10:11:50 2021
<BR><P>
<H3>Maximum Stack Usage =        256 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; osThreadCreate &rArr; tos_task_create_dyn &rArr; tos_mmheap_calloc &rArr; tos_mmheap_alloc &rArr; blk_prepare_used &rArr; blk_trim_free &rArr; blk_split &rArr; blk_mark_as_free &rArr; blk_link_next &rArr; blk_next
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[8f]">__user_initial_stackheap</a>
 <LI><a href="#[150]">port_int_disable</a>
 <LI><a href="#[151]">port_int_enable</a>
 <LI><a href="#[123]">port_cpsr_save</a>
 <LI><a href="#[122]">port_cpsr_restore</a>
 <LI><a href="#[121]">port_clz</a>
 <LI><a href="#[d4]">port_sched_start</a>
 <LI><a href="#[ce]">port_context_switch</a>
 <LI><a href="#[d2]">port_irq_context_switch</a>
 <LI><a href="#[b]">PendSV_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1f]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1f]">ADC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[7]">BusFault_Handler</a> from stm32f4xx_it.o(i.BusFault_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[21]">CAN1_RX0_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[22]">CAN1_RX1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[23]">CAN1_SCE_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[20]">CAN1_TX_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[4d]">CAN2_RX0_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[4e]">CAN2_RX1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[4f]">CAN2_SCE_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[4c]">CAN2_TX_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[5b]">DCMI_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[18]">DMA1_Stream0_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[19]">DMA1_Stream1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[1a]">DMA1_Stream2_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[1b]">DMA1_Stream3_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[1c]">DMA1_Stream4_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[1d]">DMA1_Stream5_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[1e]">DMA1_Stream6_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[3c]">DMA1_Stream7_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[66]">DMA2D_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[45]">DMA2_Stream0_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[46]">DMA2_Stream1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[47]">DMA2_Stream2_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[48]">DMA2_Stream3_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[49]">DMA2_Stream4_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[51]">DMA2_Stream5_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[52]">DMA2_Stream6_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[53]">DMA2_Stream7_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[a]">DebugMon_Handler</a> from stm32f4xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[4a]">ETH_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[4b]">ETH_WKUP_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[13]">EXTI0_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[35]">EXTI15_10_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[14]">EXTI1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[15]">EXTI2_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[16]">EXTI3_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[17]">EXTI4_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[24]">EXTI9_5_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[11]">FLASH_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[3d]">FMC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[5d]">FPU_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[5c]">HASH_RNG_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[5]">HardFault_Handler</a> from stm32f4xx_it.o(i.HardFault_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[2d]">I2C1_ER_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[2c]">I2C1_EV_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[2f]">I2C2_ER_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[2e]">I2C2_EV_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[56]">I2C3_ER_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[55]">I2C3_EV_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[65]">LTDC_ER_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[64]">LTDC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[6]">MemManage_Handler</a> from stm32f4xx_it.o(i.MemManage_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[4]">NMI_Handler</a> from stm32f4xx_it.o(i.NMI_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[50]">OTG_FS_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[37]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[58]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[57]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[5a]">OTG_HS_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[59]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[e]">PVD_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[b]">PendSV_Handler</a> from port_s.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[12]">RCC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[36]">RTC_Alarm_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[10]">RTC_WKUP_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[3]">Reset_Handler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[63]">SAI1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[3e]">SDIO_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[30]">SPI1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[31]">SPI2_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[40]">SPI3_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[60]">SPI4_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[61]">SPI5_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[62]">SPI6_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[9]">SVC_Handler</a> from stm32f4xx_it.o(i.SVC_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[c]">SysTick_Handler</a> from stm32f4xx_it.o(i.SysTick_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[67]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f429xx.o(.text)
 <LI><a href="#[f]">TAMP_STAMP_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[25]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[28]">TIM1_CC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[27]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[26]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[29]">TIM2_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[2a]">TIM3_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[2b]">TIM4_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[3f]">TIM5_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[43]">TIM6_DAC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[44]">TIM7_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[38]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[3b]">TIM8_CC_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[3a]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[39]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[41]">UART4_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[42]">UART5_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[5e]">UART7_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[5f]">UART8_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[32]">USART1_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[33]">USART2_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[34]">USART3_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[54]">USART6_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[8]">UsageFault_Handler</a> from stm32f4xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[d]">WWDG_IRQHandler</a> from startup_stm32f429xx.o(.text) referenced from startup_stm32f429xx.o(RESET)
 <LI><a href="#[6f]">__main</a> from __main.o(!!!main) referenced from startup_stm32f429xx.o(.text)
 <LI><a href="#[6a]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[69]">fputc</a> from main.o(i.fputc) referenced from _printf_char_file.o(.text)
 <LI><a href="#[6b]">knl_idle_entry</a> from tos_sys.o(i.knl_idle_entry) referenced from tos_sys.o(i.knl_idle_init)
 <LI><a href="#[6d]">task1</a> from main.o(i.task1) referenced from main.o(.constdata)
 <LI><a href="#[6e]">task2</a> from main.o(i.task2) referenced from main.o(.constdata)
 <LI><a href="#[6c]">task_exit</a> from tos_task.o(i.task_exit) referenced from tos_task.o(i.tos_task_create)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[6f]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[70]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[72]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[12d]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[12e]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[73]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[12f]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[74]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[86]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[130]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[7b]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[76]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[131]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[132]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[133]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[134]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[135]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[136]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[137]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[138]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[139]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[13a]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[13b]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[13c]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[13d]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[13e]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[13f]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[140]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[141]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[142]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[143]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[144]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[80]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[145]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[146]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[147]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[148]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[149]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[14a]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[14b]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[71]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[14c]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[78]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[7a]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[14d]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[7c]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; osThreadCreate &rArr; tos_task_create_dyn &rArr; tos_mmheap_calloc &rArr; tos_mmheap_alloc &rArr; blk_prepare_used &rArr; blk_trim_free &rArr; blk_split &rArr; blk_mark_as_free &rArr; blk_link_next &rArr; blk_next
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[14e]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[90]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[7f]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[14f]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[81]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[3]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>DMA2D_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>LTDC_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>LTDC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>SPI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>SPI6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>UART7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>UART8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f429xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f429xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[150]"></a>port_int_disable</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_s.o(.text), UNUSED)

<P><STRONG><a name="[151]"></a>port_int_enable</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_s.o(.text), UNUSED)

<P><STRONG><a name="[123]"></a>port_cpsr_save</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_s.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
</UL>

<P><STRONG><a name="[122]"></a>port_cpsr_restore</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_s.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
</UL>

<P><STRONG><a name="[121]"></a>port_clz</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_s.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_clz
</UL>

<P><STRONG><a name="[d4]"></a>port_sched_start</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_s.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_sched_start
</UL>

<P><STRONG><a name="[ce]"></a>port_context_switch</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_s.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_context_switch
</UL>

<P><STRONG><a name="[d2]"></a>port_irq_context_switch</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_s.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_context_switch
</UL>

<P><STRONG><a name="[b]"></a>PendSV_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[152]"></a>__use_no_semihosting</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi_2.o(.text), UNUSED)

<P><STRONG><a name="[a0]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_millisec2tick
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_init
</UL>

<P><STRONG><a name="[153]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[83]"></a>__2printf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, noretval__2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task2
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task1
</UL>

<P><STRONG><a name="[85]"></a>__printf</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, __printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[75]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[8b]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_calloc
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>

<P><STRONG><a name="[88]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[154]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[a5]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[155]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[156]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[89]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[8a]"></a>strncpy</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
</UL>

<P><STRONG><a name="[157]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[158]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[159]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[15a]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[15b]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[87]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[84]"></a>_printf_char_file</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[8c]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[8d]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ferror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[79]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[7e]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[15c]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[8e]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[15d]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[7]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[a8]"></a>Error_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[a6]"></a>HAL_GPIO_Init</STRONG> (Thumb, 486 bytes, Stack size 24 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[9a]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableOverDrive
</UL>

<P><STRONG><a name="[a9]"></a>HAL_IncTick</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[91]"></a>HAL_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f4xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[93]"></a>HAL_InitTick</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, stm32f4xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[94]"></a>HAL_MspInit</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, stm32f4xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[96]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_NVIC_SetPriority &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[92]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[99]"></a>HAL_PWREx_EnableOverDrive</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, stm32f4xx_hal_pwr_ex.o(i.HAL_PWREx_EnableOverDrive))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_PWREx_EnableOverDrive
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[9b]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 368 bytes, Stack size 16 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[9e]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>

<P><STRONG><a name="[9d]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[9f]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[9c]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[a1]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1152 bytes, Stack size 24 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[95]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32f4xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_SYSTICK_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[a2]"></a>HAL_UART_Init</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_UART_Init &rArr; UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[a3]"></a>HAL_UART_MspInit</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, usart.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[5]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[e2]"></a>MX_GPIO_Init</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, gpio.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MX_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a7]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, usart.o(i.MX_USART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>SysTick_Handler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = SysTick_Handler &rArr; tos_tick_handler &rArr; tick_update &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_tick_handler
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_is_running
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_leave
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[ae]"></a>SystemClock_Config</STRONG> (Thumb, 184 bytes, Stack size 80 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWREx_EnableOverDrive
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[67]"></a>SystemInit</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, system_stm32f4xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(.text)
</UL>
<P><STRONG><a name="[8]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f429xx.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>_sys_exit</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(i._sys_exit))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[cd]"></a>cpu_context_switch</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, tos_cpu.o(i.cpu_context_switch))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = cpu_context_switch
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_context_switch
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
</UL>

<P><STRONG><a name="[cf]"></a>cpu_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, tos_cpu.o(i.cpu_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = cpu_init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_systick_init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_init
</UL>

<P><STRONG><a name="[d1]"></a>cpu_irq_context_switch</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, tos_cpu.o(i.cpu_irq_context_switch))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = cpu_irq_context_switch
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_irq_context_switch
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_leave
</UL>

<P><STRONG><a name="[d3]"></a>cpu_sched_start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tos_cpu.o(i.cpu_sched_start))
<BR><BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_sched_start
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_start
</UL>

<P><STRONG><a name="[d0]"></a>cpu_systick_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tos_cpu.o(i.cpu_systick_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cpu_systick_init &rArr; port_systick_config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_systick_priority_set
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_systick_config
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_init
</UL>

<P><STRONG><a name="[12b]"></a>cpu_task_stk_init</STRONG> (Thumb, 216 bytes, Stack size 20 bytes, tos_cpu.o(i.cpu_task_stk_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = cpu_task_stk_init
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
</UL>

<P><STRONG><a name="[69]"></a>fputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, main.o(i.fputc))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[d9]"></a>knl_idle_init</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, tos_sys.o(i.knl_idle_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = knl_idle_init &rArr; tos_task_create &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_init
</UL>

<P><STRONG><a name="[10f]"></a>knl_is_idle</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tos_sys.o(i.knl_is_idle))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
</UL>

<P><STRONG><a name="[dc]"></a>knl_is_inirq</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tos_sys.o(i.knl_is_inirq))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_leave
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_yield
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create_dyn
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_lock
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_unlock
</UL>

<P><STRONG><a name="[dd]"></a>knl_is_sched_locked</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tos_sys.o(i.knl_is_sched_locked))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_leave
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_unlock
</UL>

<P><STRONG><a name="[e0]"></a>knl_is_self</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tos_sys.o(i.knl_is_self))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_leave
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_destroy_dyn
</UL>

<P><STRONG><a name="[db]"></a>knl_sched</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, tos_sys.o(i.knl_sched))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = knl_sched &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_is_running
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_context_switch
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_sched_locked
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_self
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_highest_ready_task_get
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_yield
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_unlock
</UL>

<P><STRONG><a name="[7d]"></a>main</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = main &rArr; osThreadCreate &rArr; tos_task_create_dyn &rArr; tos_mmheap_calloc &rArr; tos_mmheap_alloc &rArr; blk_prepare_used &rArr; blk_trim_free &rArr; blk_split &rArr; blk_mark_as_free &rArr; blk_link_next &rArr; blk_next
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[e6]"></a>mmheap_init_with_pool</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, tos_mmheap.o(i.mmheap_init_with_pool))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = mmheap_init_with_pool &rArr; tos_mmheap_pool_add &rArr; blk_insert &rArr; mapping_insert &rArr; __fls &rArr; generic_fls &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_add
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmheap_ctl_init
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_init
</UL>

<P><STRONG><a name="[eb]"></a>mutex_release</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tos_mutex.o(i.mutex_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = mutex_release &rArr; pend_wakeup_all &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_wakeup_all
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_old_owner_release
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_mutex_release
</UL>

<P><STRONG><a name="[ed]"></a>osDelay</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, cmsis_os.o(i.osDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = osDelay &rArr; tos_task_delay &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_millisec2tick
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errno_knl2cmsis
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task2
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task1
</UL>

<P><STRONG><a name="[e3]"></a>osKernelInitialize</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, cmsis_os.o(i.osKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = osKernelInitialize &rArr; tos_knl_init &rArr; mmheap_init_with_pool &rArr; tos_mmheap_pool_add &rArr; blk_insert &rArr; mapping_insert &rArr; __fls &rArr; generic_fls &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_init
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errno_knl2cmsis
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e5]"></a>osKernelStart</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, cmsis_os.o(i.osKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = osKernelStart &rArr; tos_knl_start
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_start
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errno_knl2cmsis
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e4]"></a>osThreadCreate</STRONG> (Thumb, 118 bytes, Stack size 40 bytes, cmsis_os.o(i.osThreadCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = osThreadCreate &rArr; tos_task_create_dyn &rArr; tos_mmheap_calloc &rArr; tos_mmheap_alloc &rArr; blk_prepare_used &rArr; blk_trim_free &rArr; blk_split &rArr; blk_mark_as_free &rArr; blk_link_next &rArr; blk_next
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create_dyn
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;priority_cmsis2knl
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f5]"></a>pend_highest_pending_prio_get</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, tos_pend.o(i.pend_highest_pending_prio_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pend_highest_pending_prio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_highest_pending_prio_get
</UL>

<P><STRONG><a name="[f7]"></a>pend_list_adjust</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, tos_pend.o(i.pend_list_adjust))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = pend_list_adjust &rArr; pend_list_add
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_del
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
</UL>

<P><STRONG><a name="[fa]"></a>pend_list_remove</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, tos_pend.o(i.pend_list_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pend_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_del
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
</UL>

<P><STRONG><a name="[fb]"></a>pend_task_wakeup</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, tos_pend.o(i.pend_task_wakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_remove
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_wakeup_all
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_update
</UL>

<P><STRONG><a name="[ec]"></a>pend_wakeup_all</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, tos_pend.o(i.pend_wakeup_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = pend_wakeup_all &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_release
</UL>

<P><STRONG><a name="[d6]"></a>port_systick_config</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, port_c.o(i.port_systick_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = port_systick_config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_systick_init
</UL>

<P><STRONG><a name="[d5]"></a>port_systick_priority_set</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, port_c.o(i.port_systick_priority_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = port_systick_priority_set &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_systick_init
</UL>

<P><STRONG><a name="[fd]"></a>readyqueue_add</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, tos_sched.o(i.readyqueue_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_tail
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_head
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
</UL>

<P><STRONG><a name="[100]"></a>readyqueue_add_head</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, tos_sched.o(i.readyqueue_add_head))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = readyqueue_add_head
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_empty
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_prio_mark
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add
</UL>

<P><STRONG><a name="[ff]"></a>readyqueue_add_tail</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, tos_sched.o(i.readyqueue_add_tail))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_empty
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_add_tail
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_prio_mark
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_yield
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add
</UL>

<P><STRONG><a name="[df]"></a>readyqueue_highest_ready_task_get</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tos_sched.o(i.readyqueue_highest_ready_task_get))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_leave
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_start
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
</UL>

<P><STRONG><a name="[124]"></a>readyqueue_init</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, tos_sched.o(i.readyqueue_init))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_init
</UL>

<P><STRONG><a name="[106]"></a>readyqueue_remove</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, tos_sched.o(i.readyqueue_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = readyqueue_remove &rArr; readyqueue_prio_highest_get &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_empty
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_prio_highest_get
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_del
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_yield
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
</UL>

<P><STRONG><a name="[6d]"></a>task1</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, main.o(i.task1))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = task1 &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[6e]"></a>task2</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, main.o(i.task2))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = task2 &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.constdata)
</UL>
<P><STRONG><a name="[d8]"></a>task_free_all</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, tos_task.o(i.task_free_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = task_free_all &rArr; task_free &rArr; tos_mmheap_free &rArr; blk_merge_prev &rArr; blk_remove &rArr; mapping_insert &rArr; __fls &rArr; generic_fls &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_del
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_free
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_idle_entry
</UL>

<P><STRONG><a name="[119]"></a>tick_list_add</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, tos_tick.o(i.tick_list_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_task_place
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
</UL>

<P><STRONG><a name="[fc]"></a>tick_list_remove</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, tos_tick.o(i.tick_list_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = tick_list_remove &rArr; tick_task_takeoff &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_task_takeoff
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
</UL>

<P><STRONG><a name="[11d]"></a>tick_update</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, tos_tick.o(i.tick_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = tick_update &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_tick_handler
</UL>

<P><STRONG><a name="[125]"></a>timer_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tos_timer.o(i.timer_init))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_init
</UL>

<P><STRONG><a name="[120]"></a>timer_update</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, tos_timer.o(i.timer_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = timer_update &rArr; timer_takeoff &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_lock
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_unlock
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_takeoff
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_place
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_tick_handler
</UL>

<P><STRONG><a name="[d7]"></a>tos_cpu_clz</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tos_cpu.o(i.tos_cpu_clz))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_clz
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_fls
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_prio_highest_get
</UL>

<P><STRONG><a name="[e1]"></a>tos_cpu_cpsr_restore</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tos_cpu.o(i.tos_cpu_cpsr_restore))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_cpsr_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_leave
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_yield
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_lock
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_task_takeoff
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_task_place
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_free_all
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_unlock
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_takeoff
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_place
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_update
</UL>

<P><STRONG><a name="[de]"></a>tos_cpu_cpsr_save</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, tos_cpu.o(i.tos_cpu_cpsr_save))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_cpsr_save
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_leave
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_yield
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_lock
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_task_takeoff
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_task_place
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_free_all
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_unlock
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_takeoff
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_place
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_update
</UL>

<P><STRONG><a name="[f1]"></a>tos_knl_init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, tos_sys.o(i.tos_knl_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = tos_knl_init &rArr; mmheap_init_with_pool &rArr; tos_mmheap_pool_add &rArr; blk_insert &rArr; mapping_insert &rArr; __fls &rArr; generic_fls &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmheap_init_with_pool
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_idle_init
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_init
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>

<P><STRONG><a name="[ab]"></a>tos_knl_irq_enter</STRONG> (Thumb, 42 bytes, Stack size 4 bytes, tos_sys.o(i.tos_knl_irq_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = tos_knl_irq_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_is_running
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[ad]"></a>tos_knl_irq_leave</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, tos_sys.o(i.tos_knl_irq_leave))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = tos_knl_irq_leave &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_is_running
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_context_switch
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_sched_locked
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_self
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_highest_ready_task_get
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[aa]"></a>tos_knl_is_running</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tos_sys.o(i.tos_knl_is_running))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_tick_handler
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_leave
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_enter
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_start
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_lock
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_unlock
</UL>

<P><STRONG><a name="[109]"></a>tos_knl_sched_lock</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, tos_sys.o(i.tos_knl_sched_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = tos_knl_sched_lock &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_is_running
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_destroy_dyn
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_update
</UL>

<P><STRONG><a name="[10b]"></a>tos_knl_sched_unlock</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, tos_sys.o(i.tos_knl_sched_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = tos_knl_sched_unlock &rArr; knl_sched &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_is_running
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_sched_locked
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_destroy_dyn
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_update
</UL>

<P><STRONG><a name="[f2]"></a>tos_knl_start</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, tos_sys.o(i.tos_knl_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = tos_knl_start
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_is_running
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_sched_start
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_highest_ready_task_get
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
</UL>

<P><STRONG><a name="[ee]"></a>tos_millisec2tick</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, tos_time.o(i.tos_millisec2tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = tos_millisec2tick &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>

<P><STRONG><a name="[126]"></a>tos_mmheap_alloc</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, tos_mmheap.o(i.tos_mmheap_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = tos_mmheap_alloc &rArr; blk_prepare_used &rArr; blk_trim_free &rArr; blk_split &rArr; blk_mark_as_free &rArr; blk_link_next &rArr; blk_next
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_prepare_used
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_locate_free
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_request_size
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create_dyn
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_calloc
</UL>

<P><STRONG><a name="[128]"></a>tos_mmheap_calloc</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, tos_mmheap.o(i.tos_mmheap_calloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = tos_mmheap_calloc &rArr; tos_mmheap_alloc &rArr; blk_prepare_used &rArr; blk_trim_free &rArr; blk_split &rArr; blk_mark_as_free &rArr; blk_link_next &rArr; blk_next
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_alloc
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create_dyn
</UL>

<P><STRONG><a name="[116]"></a>tos_mmheap_free</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, tos_mmheap.o(i.tos_mmheap_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = tos_mmheap_free &rArr; blk_merge_prev &rArr; blk_remove &rArr; mapping_insert &rArr; __fls &rArr; generic_fls &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_merge_prev
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_merge_next
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_mark_as_free
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create_dyn
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_free
</UL>

<P><STRONG><a name="[e8]"></a>tos_mmheap_pool_add</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, tos_mmheap.o(i.tos_mmheap_pool_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = tos_mmheap_pool_add &rArr; blk_insert &rArr; mapping_insert &rArr; __fls &rArr; generic_fls &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offset_to_blk
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmheap_pool_is_exist
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_set_used
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_set_size
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_set_prev_used
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_set_prev_free
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_set_free
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_link_next
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmheap_init_with_pool
</UL>

<P><STRONG><a name="[da]"></a>tos_task_create</STRONG> (Thumb, 328 bytes, Stack size 40 bytes, tos_task.o(i.tos_task_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = tos_task_create &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_is_running
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_task_stk_init
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_add
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_reset
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_verify
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_idle
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_tail
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create_dyn
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_idle_init
</UL>

<P><STRONG><a name="[f4]"></a>tos_task_create_dyn</STRONG> (Thumb, 240 bytes, Stack size 72 bytes, tos_task.o(i.tos_task_create_dyn))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = tos_task_create_dyn &rArr; tos_mmheap_calloc &rArr; tos_mmheap_alloc &rArr; blk_prepare_used &rArr; blk_trim_free &rArr; blk_split &rArr; blk_mark_as_free &rArr; blk_link_next &rArr; blk_next
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_free
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_alloc
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_calloc
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_free
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
</UL>

<P><STRONG><a name="[ef]"></a>tos_task_delay</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, tos_task.o(i.tos_task_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = tos_task_delay &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_yield
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_sched_locked
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_add
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>

<P><STRONG><a name="[115]"></a>tos_task_destroy</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, tos_task.o(i.tos_task_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = tos_task_destroy &rArr; task_destroy_dyn &rArr; task_do_destroy &rArr; task_mutex_release &rArr; mutex_release &rArr; pend_wakeup_all &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_sched_locked
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_self
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_destroy_static
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_destroy_dyn
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_verify
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_exit
</UL>

<P><STRONG><a name="[ea]"></a>tos_task_prio_change</STRONG> (Thumb, 260 bytes, Stack size 24 bytes, tos_task.o(i.tos_task_prio_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = tos_task_prio_change &rArr; readyqueue_remove &rArr; readyqueue_prio_highest_get &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_remove
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_adjust
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_self
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_empty
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_state_is_ready
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_highest_pending_prio_get
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_verify
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_tail
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_head
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_old_owner_release
</UL>

<P><STRONG><a name="[12c]"></a>tos_task_yield</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, tos_task.o(i.tos_task_yield))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = tos_task_yield &rArr; readyqueue_remove &rArr; readyqueue_prio_highest_get &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_remove
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_tail
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
</UL>

<P><STRONG><a name="[ac]"></a>tos_tick_handler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, tos_tick.o(i.tos_tick_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = tos_tick_handler &rArr; tick_update &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_is_running
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_update
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_update
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[77]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[15e]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[15f]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[97]"></a>__NVIC_GetPriorityGrouping</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.__NVIC_GetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[98]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[a4]"></a>UART_SetConfig</STRONG> (Thumb, 992 bytes, Stack size 40 bytes, stm32f4xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = UART_SetConfig &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[fe]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, port_c.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_systick_priority_set
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_systick_config
</UL>

<P><STRONG><a name="[f0]"></a>errno_knl2cmsis</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, cmsis_os.o(i.errno_knl2cmsis))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>

<P><STRONG><a name="[f3]"></a>priority_cmsis2knl</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cmsis_os.o(i.priority_cmsis2knl))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadCreate
</UL>

<P><STRONG><a name="[af]"></a>__ffs</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tos_mmheap.o(i.__ffs))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __ffs &rArr; generic_fls &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_fls
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_search_suitable
</UL>

<P><STRONG><a name="[b1]"></a>__fls</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, tos_mmheap.o(i.__fls))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __fls &rArr; generic_fls &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_fls
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapping_search
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapping_insert
</UL>

<P><STRONG><a name="[127]"></a>adjust_request_size</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, tos_mmheap.o(i.adjust_request_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = adjust_request_size
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_alloc
</UL>

<P><STRONG><a name="[b2]"></a>blk_absorb</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, tos_mmheap.o(i.blk_absorb))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = blk_absorb &rArr; blk_link_next &rArr; blk_next
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_size
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_link_next
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_merge_prev
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_merge_next
</UL>

<P><STRONG><a name="[b5]"></a>blk_can_split</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, tos_mmheap.o(i.blk_can_split))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = blk_can_split
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_size
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_trim_free
</UL>

<P><STRONG><a name="[b6]"></a>blk_insert</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, tos_mmheap.o(i.blk_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = blk_insert &rArr; mapping_insert &rArr; __fls &rArr; generic_fls &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapping_insert
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_free_block
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_size
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_free
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_add
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_trim_free
</UL>

<P><STRONG><a name="[b4]"></a>blk_link_next</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, tos_mmheap.o(i.blk_link_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = blk_link_next &rArr; blk_next
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_next
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_add
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_trim_free
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_mark_as_free
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_absorb
</UL>

<P><STRONG><a name="[ba]"></a>blk_locate_free</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, tos_mmheap.o(i.blk_locate_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = blk_locate_free &rArr; mapping_search &rArr; mapping_insert &rArr; __fls &rArr; generic_fls &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_free_block
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapping_search
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_search_suitable
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_alloc
</UL>

<P><STRONG><a name="[be]"></a>blk_mark_as_free</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, tos_mmheap.o(i.blk_mark_as_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = blk_mark_as_free &rArr; blk_link_next &rArr; blk_next
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_set_prev_free
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_set_free
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_link_next
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_free
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_split
</UL>

<P><STRONG><a name="[c1]"></a>blk_mark_as_used</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, tos_mmheap.o(i.blk_mark_as_used))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = blk_mark_as_used &rArr; blk_next
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_set_used
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_set_prev_used
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_next
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_prepare_used
</UL>

<P><STRONG><a name="[c4]"></a>blk_merge_next</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, tos_mmheap.o(i.blk_merge_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = blk_merge_next &rArr; blk_remove &rArr; mapping_insert &rArr; __fls &rArr; generic_fls &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_remove
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_next
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_absorb
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_free
</UL>

<P><STRONG><a name="[c6]"></a>blk_merge_prev</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, tos_mmheap.o(i.blk_merge_prev))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = blk_merge_prev &rArr; blk_remove &rArr; mapping_insert &rArr; __fls &rArr; generic_fls &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_remove
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_absorb
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_free
</UL>

<P><STRONG><a name="[b9]"></a>blk_next</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, tos_mmheap.o(i.blk_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = blk_next
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offset_to_blk
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_to_ptr
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_size
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_merge_next
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_mark_as_used
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_link_next
</UL>

<P><STRONG><a name="[c9]"></a>blk_prepare_used</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, tos_mmheap.o(i.blk_prepare_used))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = blk_prepare_used &rArr; blk_trim_free &rArr; blk_split &rArr; blk_mark_as_free &rArr; blk_link_next &rArr; blk_next
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_trim_free
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_to_ptr
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_mark_as_used
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_alloc
</UL>

<P><STRONG><a name="[c5]"></a>blk_remove</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, tos_mmheap.o(i.blk_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = blk_remove &rArr; mapping_insert &rArr; __fls &rArr; generic_fls &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_free_block
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapping_insert
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_size
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_merge_prev
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_merge_next
</UL>

<P><STRONG><a name="[bc]"></a>blk_search_suitable</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, tos_mmheap.o(i.blk_search_suitable))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = blk_search_suitable &rArr; __ffs &rArr; generic_fls &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ffs
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_locate_free
</UL>

<P><STRONG><a name="[c0]"></a>blk_set_free</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tos_mmheap.o(i.blk_set_free))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_add
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_mark_as_free
</UL>

<P><STRONG><a name="[bf]"></a>blk_set_prev_free</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tos_mmheap.o(i.blk_set_prev_free))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_add
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_trim_free
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_mark_as_free
</UL>

<P><STRONG><a name="[c2]"></a>blk_set_prev_used</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tos_mmheap.o(i.blk_set_prev_used))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_add
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_mark_as_used
</UL>

<P><STRONG><a name="[cc]"></a>blk_set_size</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tos_mmheap.o(i.blk_set_size))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_add
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_split
</UL>

<P><STRONG><a name="[c3]"></a>blk_set_used</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tos_mmheap.o(i.blk_set_used))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_add
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_mark_as_used
</UL>

<P><STRONG><a name="[b3]"></a>blk_size</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tos_mmheap.o(i.blk_size))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_split
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_remove
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_next
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_insert
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_can_split
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_absorb
</UL>

<P><STRONG><a name="[cb]"></a>blk_split</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, tos_mmheap.o(i.blk_split))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = blk_split &rArr; blk_mark_as_free &rArr; blk_link_next &rArr; blk_next
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offset_to_blk
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_to_ptr
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_size
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_set_size
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_mark_as_free
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_trim_free
</UL>

<P><STRONG><a name="[c7]"></a>blk_to_ptr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tos_mmheap.o(i.blk_to_ptr))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_split
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_prepare_used
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_next
</UL>

<P><STRONG><a name="[ca]"></a>blk_trim_free</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, tos_mmheap.o(i.blk_trim_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = blk_trim_free &rArr; blk_split &rArr; blk_mark_as_free &rArr; blk_link_next &rArr; blk_next
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_split
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_set_prev_free
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_link_next
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_insert
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_can_split
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_prepare_used
</UL>

<P><STRONG><a name="[b0]"></a>generic_fls</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, tos_mmheap.o(i.generic_fls))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = generic_fls &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_clz
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fls
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ffs
</UL>

<P><STRONG><a name="[b8]"></a>insert_free_block</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, tos_mmheap.o(i.insert_free_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = insert_free_block
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_insert
</UL>

<P><STRONG><a name="[b7]"></a>mapping_insert</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, tos_mmheap.o(i.mapping_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = mapping_insert &rArr; __fls &rArr; generic_fls &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fls
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapping_search
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_remove
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_insert
</UL>

<P><STRONG><a name="[bb]"></a>mapping_search</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, tos_mmheap.o(i.mapping_search))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = mapping_search &rArr; mapping_insert &rArr; __fls &rArr; generic_fls &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapping_insert
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fls
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_locate_free
</UL>

<P><STRONG><a name="[e7]"></a>mmheap_ctl_init</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, tos_mmheap.o(i.mmheap_ctl_init))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmheap_init_with_pool
</UL>

<P><STRONG><a name="[129]"></a>mmheap_pool_is_exist</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, tos_mmheap.o(i.mmheap_pool_is_exist))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_add
</UL>

<P><STRONG><a name="[c8]"></a>offset_to_blk</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tos_mmheap.o(i.offset_to_blk))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_add
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_split
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_next
</UL>

<P><STRONG><a name="[bd]"></a>remove_free_block</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, tos_mmheap.o(i.remove_free_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = remove_free_block
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_remove
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_locate_free
</UL>

<P><STRONG><a name="[e9]"></a>mutex_old_owner_release</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, tos_mutex.o(i.mutex_old_owner_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = mutex_old_owner_release &rArr; tos_task_prio_change &rArr; readyqueue_remove &rArr; readyqueue_prio_highest_get &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_release
</UL>

<P><STRONG><a name="[f9]"></a>pend_list_add</STRONG> (Thumb, 84 bytes, Stack size 12 bytes, tos_pend.o(i.pend_list_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = pend_list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_adjust
</UL>

<P><STRONG><a name="[f8]"></a>tos_list_del</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tos_pend.o(i.tos_list_del))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_remove
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_adjust
</UL>

<P><STRONG><a name="[f6]"></a>tos_list_empty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tos_pend.o(i.tos_list_empty))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_highest_pending_prio_get
</UL>

<P><STRONG><a name="[103]"></a>_list_add</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tos_sched.o(i._list_add))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_head
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_add_tail
</UL>

<P><STRONG><a name="[107]"></a>_list_del</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tos_sched.o(i._list_del))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_remove
</UL>

<P><STRONG><a name="[105]"></a>readyqueue_prio_highest_get</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, tos_sched.o(i.readyqueue_prio_highest_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = readyqueue_prio_highest_get &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_clz
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_remove
</UL>

<P><STRONG><a name="[102]"></a>readyqueue_prio_mark</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, tos_sched.o(i.readyqueue_prio_mark))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_tail
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_head
</UL>

<P><STRONG><a name="[104]"></a>tos_list_add_tail</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, tos_sched.o(i.tos_list_add_tail))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_tail
</UL>

<P><STRONG><a name="[101]"></a>tos_list_empty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tos_sched.o(i.tos_list_empty))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_remove
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_tail
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_head
</UL>

<P><STRONG><a name="[6b]"></a>knl_idle_entry</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tos_sys.o(i.knl_idle_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = knl_idle_entry &rArr; task_free_all &rArr; task_free &rArr; tos_mmheap_free &rArr; blk_merge_prev &rArr; blk_remove &rArr; mapping_insert &rArr; __fls &rArr; generic_fls &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_free_all
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tos_sys.o(i.knl_idle_init)
</UL>
<P><STRONG><a name="[12a]"></a>knl_object_verify</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tos_task.o(i.knl_object_verify))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
</UL>

<P><STRONG><a name="[108]"></a>task_destroy_dyn</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, tos_task.o(i.task_destroy_dyn))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = task_destroy_dyn &rArr; task_do_destroy &rArr; task_mutex_release &rArr; mutex_release &rArr; pend_wakeup_all &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_lock
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_self
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_add
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_free
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_unlock
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy
</UL>

<P><STRONG><a name="[10e]"></a>task_destroy_static</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, tos_task.o(i.task_destroy_static))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = task_destroy_static &rArr; task_do_destroy &rArr; task_mutex_release &rArr; mutex_release &rArr; pend_wakeup_all &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy
</UL>

<P><STRONG><a name="[10a]"></a>task_do_destroy</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, tos_task.o(i.task_do_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = task_do_destroy &rArr; task_mutex_release &rArr; mutex_release &rArr; pend_wakeup_all &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_remove
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_remove
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_remove
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_empty
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_del
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_state_is_ready
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_reset
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_mutex_release
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_idle
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_destroy_static
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_destroy_dyn
</UL>

<P><STRONG><a name="[6c]"></a>task_exit</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, tos_task.o(i.task_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = task_exit &rArr; tos_task_destroy &rArr; task_destroy_dyn &rArr; task_do_destroy &rArr; task_mutex_release &rArr; mutex_release &rArr; pend_wakeup_all &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tos_task.o(i.tos_task_create)
</UL>
<P><STRONG><a name="[10d]"></a>task_free</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tos_task.o(i.task_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = task_free &rArr; tos_mmheap_free &rArr; blk_merge_prev &rArr; blk_remove &rArr; mapping_insert &rArr; __fls &rArr; generic_fls &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_free
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create_dyn
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_destroy_dyn
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_free_all
</UL>

<P><STRONG><a name="[117]"></a>task_highest_pending_prio_get</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, tos_task.o(i.task_highest_pending_prio_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = task_highest_pending_prio_get &rArr; pend_highest_pending_prio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_highest_pending_prio_get
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
</UL>

<P><STRONG><a name="[111]"></a>task_mutex_release</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, tos_task.o(i.task_mutex_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = task_mutex_release &rArr; mutex_release &rArr; pend_wakeup_all &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_release
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
</UL>

<P><STRONG><a name="[114]"></a>task_reset</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, tos_task.o(i.task_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = task_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
</UL>

<P><STRONG><a name="[112]"></a>task_state_is_ready</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tos_task.o(i.task_state_is_ready))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
</UL>

<P><STRONG><a name="[10c]"></a>tos_list_add</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tos_task.o(i.tos_list_add))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_destroy_dyn
</UL>

<P><STRONG><a name="[113]"></a>tos_list_del</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tos_task.o(i.tos_list_del))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_free_all
</UL>

<P><STRONG><a name="[110]"></a>tos_list_empty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tos_task.o(i.tos_list_empty))
<BR><BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
</UL>

<P><STRONG><a name="[118]"></a>tos_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tos_task.o(i.tos_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_reset
</UL>

<P><STRONG><a name="[11a]"></a>tick_task_place</STRONG> (Thumb, 196 bytes, Stack size 40 bytes, tos_tick.o(i.tick_task_place))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = tick_task_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_add
</UL>

<P><STRONG><a name="[11b]"></a>tick_task_takeoff</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, tos_tick.o(i.tick_task_takeoff))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = tick_task_takeoff &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_remove
</UL>

<P><STRONG><a name="[11c]"></a>tos_list_empty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tos_tick.o(i.tos_list_empty))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_task_takeoff
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_update
</UL>

<P><STRONG><a name="[11e]"></a>timer_place</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, tos_timer.o(i.timer_place))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = timer_place &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_update
</UL>

<P><STRONG><a name="[11f]"></a>timer_takeoff</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, tos_timer.o(i.timer_takeoff))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = timer_takeoff &rArr; tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_update
</UL>

<P><STRONG><a name="[6a]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
