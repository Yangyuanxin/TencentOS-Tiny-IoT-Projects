<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [..\..\Output\USART.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ..\..\Output\USART.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Fri Sep 10 08:34:06 2021
<BR><P>
<H3>Maximum Stack Usage =        144 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; tos_knl_init &rArr; mmheap_init_with_pool &rArr; tos_mmheap_pool_add &rArr; blk_insert &rArr; mapping_insert &rArr; __fls &rArr; generic_fls &rArr; tos_cpu_clz
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[7d]">port_int_disable</a>
 <LI><a href="#[7f]">port_int_enable</a>
 <LI><a href="#[81]">port_cpsr_save</a>
 <LI><a href="#[83]">port_cpsr_restore</a>
 <LI><a href="#[7b]">port_clz</a>
 <LI><a href="#[8c]">port_sched_start</a>
 <LI><a href="#[8e]">port_context_switch</a>
 <LI><a href="#[90]">port_irq_context_switch</a>
 <LI><a href="#[8]">PendSV_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1c]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[39]">ADC3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[42]">DMA2_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[43]">DMA2_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[44]">DMA2_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[45]">DMA2_Channel4_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3a]">FSMC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from port_s.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[33]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3b]">SDIO_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3d]">SPI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[47]">SystemInit</a> from system_stm32f10x.o(.text) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[c]">TAMPER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[23]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3c]">TIM5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[40]">TIM6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[41]">TIM7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[35]">TIM8_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[38]">TIM8_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[37]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[36]">TIM8_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3e]">UART4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3f]">UART5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[34]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1d]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1e]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[48]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[4c]">fputc</a> from bsp_usart.o(.text) referenced from printf5.o(i.__0printf$5)
 <LI><a href="#[49]">knl_idle_entry</a> from tos_sys.o(.text) referenced from tos_sys.o(.text)
 <LI><a href="#[46]">main</a> from main.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[4b]">task_default_walker</a> from tos_task.o(.text) referenced from tos_task.o(.text)
 <LI><a href="#[4a]">task_exit</a> from tos_task.o(.text) referenced from tos_task.o(.text)
 <LI><a href="#[51]">test_task1</a> from main.o(.text) referenced from main.o(.text)
 <LI><a href="#[54]">test_task2</a> from main.o(.text) referenced from main.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[48]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[127]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[4d]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[124]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[128]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[129]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[12a]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[12b]"></a>__rt_lib_shutdown_fini</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))

<P><STRONG><a name="[12c]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[12d]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>SystemInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[12e]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, system_stm32f10x.o(.text), UNUSED)

<P><STRONG><a name="[51]"></a>test_task1</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = test_task1 &rArr; tos_task_delay &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[54]"></a>test_task2</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = test_task2 &rArr; tos_task_destroy &rArr; task_destroy_static &rArr; task_do_destroy &rArr; task_mutex_release &rArr; mutex_release &rArr; mutex_old_owner_release &rArr; tos_task_prio_change &rArr; task_highest_pending_prio_get &rArr; pend_highest_pending_prio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_suspend
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_resume
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[46]"></a>main</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = main &rArr; tos_knl_init &rArr; mmheap_init_with_pool &rArr; tos_mmheap_pool_add &rArr; blk_insert &rArr; mapping_insert &rArr; __fls &rArr; generic_fls &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_robin_default_timeslice_config
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_start
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_init
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Config
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = SysTick_Handler &rArr; tos_tick_handler &rArr; tick_update &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_tick_handler
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_is_running
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_leave
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f10x_it.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART1_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>USART_Config</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, bsp_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = USART_Config &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6c]"></a>Usart_SendByte</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, bsp_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_SendString
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_SendArray
</UL>

<P><STRONG><a name="[6e]"></a>Usart_SendArray</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, bsp_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_SendByte
</UL>

<P><STRONG><a name="[6f]"></a>Usart_SendString</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, bsp_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_SendByte
</UL>

<P><STRONG><a name="[70]"></a>Usart_SendHalfWord</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, bsp_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
</UL>

<P><STRONG><a name="[4c]"></a>fputc</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, bsp_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf5.o(i.__0printf$5)
</UL>
<P><STRONG><a name="[71]"></a>fgetc</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, bsp_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
</UL>

<P><STRONG><a name="[65]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[66]"></a>NVIC_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, misc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[12f]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[130]"></a>NVIC_SystemLPConfig</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[131]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[72]"></a>GPIO_DeInit</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[74]"></a>GPIO_AFIODeInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[68]"></a>GPIO_Init</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Config
</UL>

<P><STRONG><a name="[132]"></a>GPIO_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[133]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[134]"></a>GPIO_ReadInputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[135]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[136]"></a>GPIO_ReadOutputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[137]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[138]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[139]"></a>GPIO_WriteBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[13a]"></a>GPIO_Write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[13b]"></a>GPIO_PinLockConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[13c]"></a>GPIO_EventOutputConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[13d]"></a>GPIO_EventOutputCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[13e]"></a>GPIO_PinRemapConfig</STRONG> (Thumb, 138 bytes, Stack size 20 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[13f]"></a>GPIO_EXTILineConfig</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[140]"></a>GPIO_ETH_MediaInterfaceConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[141]"></a>RCC_DeInit</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[142]"></a>RCC_HSEConfig</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[76]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
</UL>

<P><STRONG><a name="[75]"></a>RCC_WaitForHSEStartUp</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>

<P><STRONG><a name="[143]"></a>RCC_AdjustHSICalibrationValue</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[144]"></a>RCC_HSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[145]"></a>RCC_PLLConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[146]"></a>RCC_PLLCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[147]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[148]"></a>RCC_GetSYSCLKSource</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[149]"></a>RCC_HCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[14a]"></a>RCC_PCLK1Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[14b]"></a>RCC_PCLK2Config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[14c]"></a>RCC_ITConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[14d]"></a>RCC_USBCLKConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[14e]"></a>RCC_ADCCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[14f]"></a>RCC_LSEConfig</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[150]"></a>RCC_LSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[151]"></a>RCC_RTCCLKConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[152]"></a>RCC_RTCCLKCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[79]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 192 bytes, Stack size 12 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[153]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[67]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Config
</UL>

<P><STRONG><a name="[154]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[73]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_AFIODeInit
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DeInit
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
</UL>

<P><STRONG><a name="[78]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
</UL>

<P><STRONG><a name="[155]"></a>RCC_BackupResetCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[156]"></a>RCC_ClockSecuritySystemCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[157]"></a>RCC_MCOConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[158]"></a>RCC_ClearFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[159]"></a>RCC_GetITStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[15a]"></a>RCC_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[77]"></a>USART_DeInit</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[69]"></a>USART_Init</STRONG> (Thumb, 210 bytes, Stack size 56 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Config
</UL>

<P><STRONG><a name="[15b]"></a>USART_StructInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[15c]"></a>USART_ClockInit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[15d]"></a>USART_ClockStructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[6b]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Config
</UL>

<P><STRONG><a name="[6a]"></a>USART_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Config
</UL>

<P><STRONG><a name="[15e]"></a>USART_DMACmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[15f]"></a>USART_SetAddress</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[160]"></a>USART_WakeUpConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[161]"></a>USART_ReceiverWakeUpCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[162]"></a>USART_LINBreakDetectLengthConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[163]"></a>USART_LINCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[63]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_SendHalfWord
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_SendByte
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[62]"></a>USART_ReceiveData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[164]"></a>USART_SendBreak</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[165]"></a>USART_SetGuardTime</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[166]"></a>USART_SetPrescaler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[167]"></a>USART_SmartCardCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[168]"></a>USART_SmartCardNACKCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[169]"></a>USART_HalfDuplexCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[16a]"></a>USART_OverSampling8Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[16b]"></a>USART_OneBitMethodCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[16c]"></a>USART_IrDAConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[16d]"></a>USART_IrDACmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[6d]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fgetc
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_SendHalfWord
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_SendString
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_SendArray
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Usart_SendByte
</UL>

<P><STRONG><a name="[16e]"></a>USART_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[61]"></a>USART_GetITStatus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f10x_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[16f]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f10x_usart.o(.text), UNUSED)

<P><STRONG><a name="[7a]"></a>tos_cpu_clz</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tos_cpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_clz
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_fls
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_prio_highest_get
</UL>

<P><STRONG><a name="[7c]"></a>tos_cpu_int_disable</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, tos_cpu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_int_disable
</UL>

<P><STRONG><a name="[7e]"></a>tos_cpu_int_enable</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, tos_cpu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_int_enable
</UL>

<P><STRONG><a name="[80]"></a>tos_cpu_cpsr_save</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, tos_cpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = tos_cpu_cpsr_save
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_cpsr_save
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_leave
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_suspend
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_resume
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_robin_default_timeslice_config
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_next_expires_get
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_takeoff
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_place
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_next_expires_get
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_update
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_task_takeoff
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_task_place
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_walkthru
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay_abort
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_yield
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_curr_task_get
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_unlock
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robin_sched
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_robin_timeslice_set
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_lock
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_post
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend_timed
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_destroy
</UL>

<P><STRONG><a name="[82]"></a>tos_cpu_cpsr_restore</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tos_cpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_cpsr_restore
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_leave
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_suspend
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_resume
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_robin_default_timeslice_config
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_next_expires_get
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_takeoff
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_place
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_next_expires_get
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_update
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_task_takeoff
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_task_place
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_walkthru
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay_abort
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_yield
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_curr_task_get
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_unlock
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robin_sched
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_robin_timeslice_set
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_lock
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_post
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend_timed
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_destroy
</UL>

<P><STRONG><a name="[84]"></a>cpu_systick_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tos_cpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = cpu_systick_init &rArr; port_systick_config &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_systick_priority_set
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_systick_config
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_init
</UL>

<P><STRONG><a name="[87]"></a>cpu_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, tos_cpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = cpu_init &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_systick_init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_init
</UL>

<P><STRONG><a name="[89]"></a>cpu_reset</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, tos_cpu.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_cpu_reset
</UL>

<P><STRONG><a name="[8b]"></a>cpu_sched_start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tos_cpu.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_sched_start
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_start
</UL>

<P><STRONG><a name="[8d]"></a>cpu_context_switch</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, tos_cpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = cpu_context_switch
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_context_switch
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
</UL>

<P><STRONG><a name="[8f]"></a>cpu_irq_context_switch</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, tos_cpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = cpu_irq_context_switch
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_irq_context_switch
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_leave
</UL>

<P><STRONG><a name="[108]"></a>cpu_task_stk_init</STRONG> (Thumb, 160 bytes, Stack size 20 bytes, tos_cpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = cpu_task_stk_init
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
</UL>

<P><STRONG><a name="[8a]"></a>port_cpu_reset</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, port_c.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_reset
</UL>

<P><STRONG><a name="[86]"></a>port_systick_config</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, port_c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = port_systick_config &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_systick_init
</UL>

<P><STRONG><a name="[85]"></a>port_systick_priority_set</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, port_c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = port_systick_priority_set &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_systick_init
</UL>

<P><STRONG><a name="[7d]"></a>port_int_disable</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_s.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_int_disable
</UL>

<P><STRONG><a name="[7f]"></a>port_int_enable</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_s.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_int_enable
</UL>

<P><STRONG><a name="[81]"></a>port_cpsr_save</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_s.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
</UL>

<P><STRONG><a name="[83]"></a>port_cpsr_restore</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_s.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
</UL>

<P><STRONG><a name="[7b]"></a>port_clz</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_s.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_clz
</UL>

<P><STRONG><a name="[8c]"></a>port_sched_start</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_s.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_sched_start
</UL>

<P><STRONG><a name="[8e]"></a>port_context_switch</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_s.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_context_switch
</UL>

<P><STRONG><a name="[90]"></a>port_irq_context_switch</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_s.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_context_switch
</UL>

<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, port_s.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[b2]"></a>mmheap_init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, tos_mmheap.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmheap_ctl_init
</UL>

<P><STRONG><a name="[b4]"></a>tos_mmheap_pool_add</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, tos_mmheap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = tos_mmheap_pool_add &rArr; blk_insert &rArr; mapping_insert &rArr; __fls &rArr; generic_fls &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offset_to_blk
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_set_prev_free
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_set_used
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_set_free
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_set_size
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmheap_pool_is_exist
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_insert
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_link_next
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_set_prev_used
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmheap_init_with_pool
</UL>

<P><STRONG><a name="[b6]"></a>mmheap_init_with_pool</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, tos_mmheap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = mmheap_init_with_pool &rArr; tos_mmheap_pool_add &rArr; blk_insert &rArr; mapping_insert &rArr; __fls &rArr; generic_fls &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_add
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmheap_ctl_init
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_init
</UL>

<P><STRONG><a name="[b7]"></a>tos_mmheap_alloc</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, tos_mmheap.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_prepare_used
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_request_size
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_locate_free
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_realloc
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_calloc
</UL>

<P><STRONG><a name="[b9]"></a>tos_mmheap_calloc</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, tos_mmheap.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_alloc
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_create_dyn
</UL>

<P><STRONG><a name="[bb]"></a>tos_mmheap_aligned_alloc</STRONG> (Thumb, 164 bytes, Stack size 64 bytes, tos_mmheap.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;align_ptr
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_to_ptr
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_prepare_used
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_request_size
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_locate_free
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_trim_free_leading
</UL>

<P><STRONG><a name="[bd]"></a>tos_mmheap_free</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, tos_mmheap.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_merge_next
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_merge_prev
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_insert
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_mark_as_free
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_realloc
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_destroy
</UL>

<P><STRONG><a name="[be]"></a>tos_mmheap_realloc</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, tos_mmheap.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_size
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_request_size
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_trim_used
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_merge_next
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_mark_as_used
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_next
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_free
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_alloc
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[c0]"></a>tos_mmheap_pool_rmv</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, tos_mmheap.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offset_to_blk
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_size
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmheap_pool_unrecord
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmheap_pool_is_exist
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_free_block
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapping_insert
</UL>

<P><STRONG><a name="[c2]"></a>tos_mmheap_pool_check</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, tos_mmheap.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offset_to_blk
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_size
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_next
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_check
</UL>

<P><STRONG><a name="[c3]"></a>tos_mmheap_check</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, tos_mmheap.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_check
</UL>

<P><STRONG><a name="[c6]"></a>mutex_release</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tos_mutex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = mutex_release &rArr; mutex_old_owner_release &rArr; tos_task_prio_change &rArr; task_highest_pending_prio_get &rArr; pend_highest_pending_prio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_old_owner_release
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_wakeup_all
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_mutex_release
</UL>

<P><STRONG><a name="[c8]"></a>tos_mutex_create</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, tos_mutex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_object_init
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_init
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_init
</UL>

<P><STRONG><a name="[cd]"></a>tos_mutex_create_dyn</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, tos_mutex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_calloc
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_object_init
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_init
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_init
</UL>

<P><STRONG><a name="[ce]"></a>tos_mutex_destroy</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, tos_mutex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_old_owner_release
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_wakeup_all
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_object_deinit
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_free
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_verify
</UL>

<P><STRONG><a name="[d2]"></a>tos_mutex_pend_timed</STRONG> (Thumb, 294 bytes, Stack size 24 bytes, tos_mutex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_fresh_owner_mark
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_block
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_state2errno
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_sched_locked
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_self
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_verify
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend
</UL>

<P><STRONG><a name="[d8]"></a>tos_mutex_pend</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, tos_mutex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend_timed
</UL>

<P><STRONG><a name="[d9]"></a>tos_mutex_post</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, tos_mutex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_fresh_owner_mark
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_old_owner_release
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_wakeup_one
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_is_nopending
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_highest_pending_task_get
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_highest_pending_prio_get
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_self
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_verify
</UL>

<P><STRONG><a name="[dc]"></a>pend_highest_pending_prio_get</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, tos_pend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = pend_highest_pending_prio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_highest_pending_prio_get
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_post
</UL>

<P><STRONG><a name="[db]"></a>pend_highest_pending_task_get</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tos_pend.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_post
</UL>

<P><STRONG><a name="[df]"></a>pend_list_remove</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, tos_pend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pend_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_del
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
</UL>

<P><STRONG><a name="[ca]"></a>pend_object_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tos_pend.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_create_dyn
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_create
</UL>

<P><STRONG><a name="[d0]"></a>pend_object_deinit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tos_pend.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_destroy
</UL>

<P><STRONG><a name="[da]"></a>pend_is_nopending</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tos_pend.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_post
</UL>

<P><STRONG><a name="[e2]"></a>pend_list_adjust</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, tos_pend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = pend_list_adjust &rArr; pend_list_add
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_del
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
</UL>

<P><STRONG><a name="[d7]"></a>pend_state2errno</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, tos_pend.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend_timed
</UL>

<P><STRONG><a name="[e4]"></a>pend_task_wakeup</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, tos_pend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_remove
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_wakeup_all
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_update
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_wakeup_one
</UL>

<P><STRONG><a name="[d6]"></a>pend_task_block</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, tos_pend.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_add
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_remove
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend_timed
</UL>

<P><STRONG><a name="[dd]"></a>pend_wakeup_one</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, tos_pend.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_wakeup
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_post
</UL>

<P><STRONG><a name="[c7]"></a>pend_wakeup_all</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, tos_pend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = pend_wakeup_all &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_wakeup
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_destroy
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_release
</UL>

<P><STRONG><a name="[e9]"></a>pend_wakeup</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, tos_pend.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_wakeup_all
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_wakeup_one
</UL>

<P><STRONG><a name="[5a]"></a>tos_robin_default_timeslice_config</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, tos_robin.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = tos_robin_default_timeslice_config &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ea]"></a>tos_robin_timeslice_set</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, tos_robin.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
</UL>

<P><STRONG><a name="[eb]"></a>robin_sched</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, tos_robin.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = robin_sched &rArr; readyqueue_move_head_to_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_sched_locked
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_move_head_to_tail
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_is_prio_onlyone
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_first_task_get
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_idle
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_tick_handler
</UL>

<P><STRONG><a name="[ee]"></a>readyqueue_is_prio_onlyone</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, tos_sched.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robin_sched
</UL>

<P><STRONG><a name="[ec]"></a>readyqueue_first_task_get</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, tos_sched.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = readyqueue_first_task_get
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robin_sched
</UL>

<P><STRONG><a name="[fb]"></a>readyqueue_highest_ready_task_get</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, tos_sched.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_leave
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_start
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
</UL>

<P><STRONG><a name="[f9]"></a>readyqueue_init</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, tos_sched.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_init
</UL>

<P><STRONG><a name="[f2]"></a>readyqueue_add_head</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, tos_sched.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = readyqueue_add_head
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_empty
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_prio_mark
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
</UL>

<P><STRONG><a name="[f5]"></a>readyqueue_add_tail</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, tos_sched.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_empty
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_add_tail
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_prio_mark
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_yield
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
</UL>

<P><STRONG><a name="[e6]"></a>readyqueue_add</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, tos_sched.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_tail
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_head
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_resume
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay_abort
</UL>

<P><STRONG><a name="[e7]"></a>readyqueue_remove</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, tos_sched.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = readyqueue_remove &rArr; readyqueue_prio_highest_get &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_empty
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_del
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_prio_highest_get
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_suspend
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_block
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_yield
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
</UL>

<P><STRONG><a name="[ef]"></a>readyqueue_move_head_to_tail</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, tos_sched.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = readyqueue_move_head_to_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_empty
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_add_tail
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_del
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robin_sched
</UL>

<P><STRONG><a name="[f8]"></a>knl_idle_init</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, tos_sys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = knl_idle_init &rArr; tos_task_create &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_init
</UL>

<P><STRONG><a name="[59]"></a>tos_knl_init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, tos_sys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = tos_knl_init &rArr; mmheap_init_with_pool &rArr; tos_mmheap_pool_add &rArr; blk_insert &rArr; mapping_insert &rArr; __fls &rArr; generic_fls &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmheap_init_with_pool
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_idle_init
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_init
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5d]"></a>tos_knl_is_running</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tos_sys.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_tick_handler
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_leave
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_enter
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_start
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_curr_task_get
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_unlock
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_lock
</UL>

<P><STRONG><a name="[5e]"></a>tos_knl_irq_enter</STRONG> (Thumb, 42 bytes, Stack size 4 bytes, tos_sys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = tos_knl_irq_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_is_running
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[d4]"></a>knl_is_self</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tos_sys.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_leave
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_suspend
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_resume
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay_abort
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_post
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend_timed
</UL>

<P><STRONG><a name="[d5]"></a>knl_is_sched_locked</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tos_sys.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_leave
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_suspend
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_unlock
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robin_sched
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend_timed
</UL>

<P><STRONG><a name="[c9]"></a>knl_is_inirq</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, tos_sys.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_irq_leave
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay_abort
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_yield
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_unlock
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_lock
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_post
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend_timed
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_destroy
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_create_dyn
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_create
</UL>

<P><STRONG><a name="[60]"></a>tos_knl_irq_leave</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, tos_sys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = tos_knl_irq_leave &rArr; cpu_irq_context_switch
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_is_running
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_sched_locked
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_irq_context_switch
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_highest_ready_task_get
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_self
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[fc]"></a>tos_knl_sched_lock</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, tos_sys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = tos_knl_sched_lock &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_is_running
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_update
</UL>

<P><STRONG><a name="[d1]"></a>knl_sched</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, tos_sys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = knl_sched &rArr; cpu_context_switch
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_is_running
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_sched_locked
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_context_switch
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_highest_ready_task_get
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_self
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_suspend
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_resume
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay_abort
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_yield
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_unlock
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robin_sched
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_post
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend_timed
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_destroy
</UL>

<P><STRONG><a name="[fd]"></a>tos_knl_sched_unlock</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, tos_sys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = tos_knl_sched_unlock &rArr; knl_sched &rArr; cpu_context_switch
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_is_running
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_sched_locked
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_update
</UL>

<P><STRONG><a name="[5c]"></a>tos_knl_start</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, tos_sys.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = tos_knl_start
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_is_running
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_sched_start
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_highest_ready_task_get
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ed]"></a>knl_is_idle</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tos_sys.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_suspend
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robin_sched
</UL>

<P><STRONG><a name="[fe]"></a>tos_task_curr_task_get</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, tos_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = tos_task_curr_task_get &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_is_running
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_default_walker
</UL>

<P><STRONG><a name="[57]"></a>tos_task_destroy</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, tos_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = tos_task_destroy &rArr; task_destroy_static &rArr; task_do_destroy &rArr; task_mutex_release &rArr; mutex_release &rArr; mutex_old_owner_release &rArr; tos_task_prio_change &rArr; task_highest_pending_prio_get &rArr; pend_highest_pending_prio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_sched_locked
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_verify
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_destroy_static
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_self
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_task2
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_exit
</UL>

<P><STRONG><a name="[5b]"></a>tos_task_create</STRONG> (Thumb, 352 bytes, Stack size 48 bytes, tos_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = tos_task_create &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_is_running
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_task_stk_init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_verify
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_reset
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_tail
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_idle
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_idle_init
</UL>

<P><STRONG><a name="[10a]"></a>tos_task_yield</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, tos_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = tos_task_yield &rArr; readyqueue_remove &rArr; readyqueue_prio_highest_get &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_tail
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
</UL>

<P><STRONG><a name="[c5]"></a>tos_task_prio_change</STRONG> (Thumb, 280 bytes, Stack size 24 bytes, tos_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = tos_task_prio_change &rArr; task_highest_pending_prio_get &rArr; pend_highest_pending_prio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_state_is_ready
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_verify
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_empty
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_highest_pending_prio_get
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_tail
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_head
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_remove
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_adjust
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_self
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_old_owner_release
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_post
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend_timed
</UL>

<P><STRONG><a name="[55]"></a>tos_task_suspend</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, tos_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = tos_task_suspend &rArr; readyqueue_remove &rArr; readyqueue_prio_highest_get &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_sched_locked
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_state_is_ready
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_verify
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_idle
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_remove
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_self
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_task2
</UL>

<P><STRONG><a name="[56]"></a>tos_task_resume</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, tos_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = tos_task_resume &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_state_is_ready
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_verify
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_self
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_task2
</UL>

<P><STRONG><a name="[53]"></a>tos_task_delay</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, tos_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = tos_task_delay &rArr; tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_sched_locked
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_yield
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_add
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_task2
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_task1
</UL>

<P><STRONG><a name="[10b]"></a>tos_task_delay_abort</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, tos_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_inirq
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_verify
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_remove
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_self
</UL>

<P><STRONG><a name="[10c]"></a>tos_task_walkthru</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, tos_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_info_display
</UL>

<P><STRONG><a name="[10d]"></a>tos_task_info_display</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, tos_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_walkthru
</UL>

<P><STRONG><a name="[e8]"></a>tick_list_add</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, tos_tick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = tick_list_add &rArr; tick_task_place &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_task_place
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_block
</UL>

<P><STRONG><a name="[e5]"></a>tick_list_remove</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, tos_tick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = tick_list_remove &rArr; tick_task_takeoff &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_task_takeoff
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay_abort
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
</UL>

<P><STRONG><a name="[111]"></a>tick_update</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, tos_tick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = tick_update &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_tick_handler
</UL>

<P><STRONG><a name="[112]"></a>tick_next_expires_get</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, tos_tick.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_empty
</UL>

<P><STRONG><a name="[5f]"></a>tos_tick_handler</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, tos_tick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = tos_tick_handler &rArr; tick_update &rArr; pend_task_wakeup &rArr; readyqueue_add &rArr; readyqueue_add_tail &rArr; tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_is_running
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_update
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_update
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;robin_sched
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[116]"></a>tos_timer_create</STRONG> (Thumb, 228 bytes, Stack size 40 bytes, tos_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_init
</UL>

<P><STRONG><a name="[118]"></a>tos_timer_destroy</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, tos_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_verify
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_init
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_takeoff
</UL>

<P><STRONG><a name="[11a]"></a>tos_timer_start</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, tos_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_verify
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_takeoff
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_place
</UL>

<P><STRONG><a name="[11b]"></a>tos_timer_stop</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, tos_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_verify
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_takeoff
</UL>

<P><STRONG><a name="[11d]"></a>tos_timer_delay_change</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, tos_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_change
</UL>

<P><STRONG><a name="[11e]"></a>tos_timer_period_change</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, tos_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_change
</UL>

<P><STRONG><a name="[11f]"></a>timer_next_expires_get</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, tos_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
</UL>

<P><STRONG><a name="[113]"></a>timer_update</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, tos_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = timer_update &rArr; timer_takeoff &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_takeoff
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_place
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_unlock
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_sched_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_tick_handler
</UL>

<P><STRONG><a name="[fa]"></a>timer_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tos_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_knl_init
</UL>

<P><STRONG><a name="[88]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_init
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[bf]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_realloc
</UL>

<P><STRONG><a name="[170]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[171]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[122]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[172]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[173]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[ba]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_calloc
</UL>

<P><STRONG><a name="[174]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[175]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[123]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[109]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
</UL>

<P><STRONG><a name="[121]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[176]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[120]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[177]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[4e]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[178]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[125]"></a>__0printf$5</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf5.o(i.__0printf$5), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[179]"></a>__1printf$5</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf5.o(i.__0printf$5), UNUSED)

<P><STRONG><a name="[52]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf5.o(i.__0printf$5))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_task2
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_task1
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_default_walker
</UL>

<P><STRONG><a name="[17a]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[17b]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[17c]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[50]"></a>SetSysClockTo72</STRONG> (Thumb, 214 bytes, Stack size 12 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[4f]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[64]"></a>NVIC_Configuration</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, bsp_usart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = NVIC_Configuration &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Config
</UL>

<P><STRONG><a name="[91]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, port_c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_systick_priority_set
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_systick_config
</UL>

<P><STRONG><a name="[92]"></a>generic_fls</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, tos_mmheap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = generic_fls &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_clz
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fls
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ffs
</UL>

<P><STRONG><a name="[93]"></a>__ffs</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tos_mmheap.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_fls
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_search_suitable
</UL>

<P><STRONG><a name="[94]"></a>__fls</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, tos_mmheap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = __fls &rArr; generic_fls &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;generic_fls
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapping_search
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapping_insert
</UL>

<P><STRONG><a name="[95]"></a>mapping_insert</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, tos_mmheap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = mapping_insert &rArr; __fls &rArr; generic_fls &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fls
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_rmv
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_insert
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_remove
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapping_search
</UL>

<P><STRONG><a name="[96]"></a>mapping_search</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, tos_mmheap.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapping_insert
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fls
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_locate_free
</UL>

<P><STRONG><a name="[a0]"></a>blk_set_prev_used</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tos_mmheap.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_add
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_trim_used
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_mark_as_used
</UL>

<P><STRONG><a name="[97]"></a>blk_next</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, tos_mmheap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = blk_next
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offset_to_blk
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_to_ptr
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_size
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_check
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_realloc
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_merge_next
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_mark_as_used
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_link_next
</UL>

<P><STRONG><a name="[9b]"></a>blk_link_next</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, tos_mmheap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = blk_link_next &rArr; blk_next
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_next
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_add
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_trim_free_leading
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_trim_free
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_absorb
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_mark_as_free
</UL>

<P><STRONG><a name="[9c]"></a>blk_mark_as_free</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, tos_mmheap.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_set_prev_free
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_set_free
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_link_next
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_split
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_free
</UL>

<P><STRONG><a name="[9f]"></a>blk_mark_as_used</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, tos_mmheap.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_set_used
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_next
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_set_prev_used
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_realloc
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_prepare_used
</UL>

<P><STRONG><a name="[a5]"></a>insert_free_block</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, tos_mmheap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = insert_free_block
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_insert
</UL>

<P><STRONG><a name="[a3]"></a>remove_free_block</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, tos_mmheap.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_rmv
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_locate_free
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_remove
</UL>

<P><STRONG><a name="[a2]"></a>blk_remove</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, tos_mmheap.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_size
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_free_block
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapping_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_merge_next
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_merge_prev
</UL>

<P><STRONG><a name="[a4]"></a>blk_insert</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, tos_mmheap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = blk_insert &rArr; mapping_insert &rArr; __fls &rArr; generic_fls &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_size
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_free_block
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapping_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_add
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_trim_free_leading
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_trim_used
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_trim_free
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_free
</UL>

<P><STRONG><a name="[a6]"></a>blk_can_split</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, tos_mmheap.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_size
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_trim_free_leading
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_trim_used
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_trim_free
</UL>

<P><STRONG><a name="[a7]"></a>blk_split</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, tos_mmheap.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;offset_to_blk
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_to_ptr
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_set_size
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_size
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_mark_as_free
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_trim_free_leading
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_trim_used
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_trim_free
</UL>

<P><STRONG><a name="[a9]"></a>blk_absorb</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, tos_mmheap.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_size
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_link_next
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_merge_next
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_merge_prev
</UL>

<P><STRONG><a name="[aa]"></a>blk_merge_prev</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, tos_mmheap.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_absorb
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_free
</UL>

<P><STRONG><a name="[ab]"></a>blk_merge_next</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, tos_mmheap.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_absorb
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_remove
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_next
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_realloc
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_trim_used
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_free
</UL>

<P><STRONG><a name="[ac]"></a>blk_trim_free</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, tos_mmheap.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_set_prev_free
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_split
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_can_split
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_insert
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_link_next
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_prepare_used
</UL>

<P><STRONG><a name="[ad]"></a>blk_trim_used</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, tos_mmheap.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_merge_next
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_split
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_can_split
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_insert
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_set_prev_used
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_realloc
</UL>

<P><STRONG><a name="[ae]"></a>blk_trim_free_leading</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, tos_mmheap.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_set_prev_free
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_split
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_can_split
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_insert
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_link_next
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_aligned_alloc
</UL>

<P><STRONG><a name="[af]"></a>blk_search_suitable</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, tos_mmheap.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ffs
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_locate_free
</UL>

<P><STRONG><a name="[b0]"></a>blk_locate_free</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, tos_mmheap.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_search_suitable
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_free_block
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapping_search
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_aligned_alloc
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_alloc
</UL>

<P><STRONG><a name="[b8]"></a>adjust_request_size</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, tos_mmheap.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_realloc
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_aligned_alloc
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_alloc
</UL>

<P><STRONG><a name="[b1]"></a>blk_prepare_used</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, tos_mmheap.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_to_ptr
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_trim_free
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_mark_as_used
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_aligned_alloc
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_alloc
</UL>

<P><STRONG><a name="[b5]"></a>mmheap_pool_is_exist</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, tos_mmheap.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_rmv
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_add
</UL>

<P><STRONG><a name="[c1]"></a>mmheap_pool_unrecord</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, tos_mmheap.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_rmv
</UL>

<P><STRONG><a name="[b3]"></a>mmheap_ctl_init</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, tos_mmheap.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmheap_init_with_pool
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mmheap_init
</UL>

<P><STRONG><a name="[98]"></a>blk_size</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tos_mmheap.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_check
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_rmv
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_realloc
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_absorb
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_split
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_can_split
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_insert
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_remove
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_next
</UL>

<P><STRONG><a name="[a8]"></a>blk_set_size</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tos_mmheap.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_add
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_split
</UL>

<P><STRONG><a name="[9e]"></a>blk_set_free</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tos_mmheap.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_add
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_mark_as_free
</UL>

<P><STRONG><a name="[a1]"></a>blk_set_used</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tos_mmheap.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_add
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_mark_as_used
</UL>

<P><STRONG><a name="[9d]"></a>blk_set_prev_free</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tos_mmheap.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_add
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_trim_free_leading
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_trim_free
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_mark_as_free
</UL>

<P><STRONG><a name="[99]"></a>blk_to_ptr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tos_mmheap.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_aligned_alloc
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_prepare_used
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_split
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_next
</UL>

<P><STRONG><a name="[9a]"></a>offset_to_blk</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tos_mmheap.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_check
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_rmv
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_pool_add
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_split
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;blk_next
</UL>

<P><STRONG><a name="[bc]"></a>align_ptr</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tos_mmheap.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mmheap_aligned_alloc
</UL>

<P><STRONG><a name="[c4]"></a>mutex_old_owner_release</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, tos_mutex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = mutex_old_owner_release &rArr; tos_task_prio_change &rArr; task_highest_pending_prio_get &rArr; pend_highest_pending_prio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_post
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_destroy
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_release
</UL>

<P><STRONG><a name="[d3]"></a>mutex_fresh_owner_mark</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, tos_mutex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_post
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend_timed
</UL>

<P><STRONG><a name="[cb]"></a>tos_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tos_mutex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_create_dyn
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_create
</UL>

<P><STRONG><a name="[cf]"></a>knl_object_verify</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tos_mutex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_post
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_pend_timed
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_destroy
</UL>

<P><STRONG><a name="[cc]"></a>knl_object_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tos_mutex.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_create_dyn
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_mutex_create
</UL>

<P><STRONG><a name="[e3]"></a>pend_list_add</STRONG> (Thumb, 84 bytes, Stack size 12 bytes, tos_pend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = pend_list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_block
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_adjust
</UL>

<P><STRONG><a name="[e1]"></a>tos_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tos_pend.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_object_init
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_object_deinit
</UL>

<P><STRONG><a name="[e0]"></a>tos_list_del</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tos_pend.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_adjust
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_remove
</UL>

<P><STRONG><a name="[de]"></a>tos_list_empty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tos_pend.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_is_nopending
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_highest_pending_prio_get
</UL>

<P><STRONG><a name="[f4]"></a>_list_add</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tos_sched.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_head
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_add_tail
</UL>

<P><STRONG><a name="[f0]"></a>readyqueue_prio_highest_get</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, tos_sched.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = readyqueue_prio_highest_get &rArr; tos_cpu_clz
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_clz
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_remove
</UL>

<P><STRONG><a name="[f3]"></a>readyqueue_prio_mark</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, tos_sched.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_tail
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_head
</UL>

<P><STRONG><a name="[f7]"></a>_list_del</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tos_sched.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_move_head_to_tail
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_remove
</UL>

<P><STRONG><a name="[f6]"></a>tos_list_add_tail</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, tos_sched.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tos_list_add_tail
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_add
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_tail
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_move_head_to_tail
</UL>

<P><STRONG><a name="[f1]"></a>tos_list_empty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tos_sched.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_tail
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_add_head
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_move_head_to_tail
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_first_task_get
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_remove
</UL>

<P><STRONG><a name="[49]"></a>knl_idle_entry</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tos_sys.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> tos_sys.o(.text)
</UL>
<P><STRONG><a name="[ff]"></a>task_reset</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, tos_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = task_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
</UL>

<P><STRONG><a name="[101]"></a>task_mutex_release</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, tos_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = task_mutex_release &rArr; mutex_release &rArr; mutex_old_owner_release &rArr; tos_task_prio_change &rArr; task_highest_pending_prio_get &rArr; pend_highest_pending_prio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_release
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
</UL>

<P><STRONG><a name="[102]"></a>task_do_destroy</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, tos_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = task_do_destroy &rArr; task_mutex_release &rArr; mutex_release &rArr; mutex_old_owner_release &rArr; tos_task_prio_change &rArr; task_highest_pending_prio_get &rArr; pend_highest_pending_prio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_sched
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_state_is_ready
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_empty
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_mutex_release
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_reset
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_is_idle
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_remove
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readyqueue_remove
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_destroy_static
</UL>

<P><STRONG><a name="[105]"></a>task_destroy_static</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tos_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = task_destroy_static &rArr; task_do_destroy &rArr; task_mutex_release &rArr; mutex_release &rArr; mutex_old_owner_release &rArr; tos_task_prio_change &rArr; task_highest_pending_prio_get &rArr; pend_highest_pending_prio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy
</UL>

<P><STRONG><a name="[4a]"></a>task_exit</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, tos_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = task_exit &rArr; tos_task_destroy &rArr; task_destroy_static &rArr; task_do_destroy &rArr; task_mutex_release &rArr; mutex_release &rArr; mutex_old_owner_release &rArr; tos_task_prio_change &rArr; task_highest_pending_prio_get &rArr; pend_highest_pending_prio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tos_task.o(.text)
</UL>
<P><STRONG><a name="[107]"></a>task_highest_pending_prio_get</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, tos_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = task_highest_pending_prio_get &rArr; pend_highest_pending_prio_get
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_highest_pending_prio_get
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
</UL>

<P><STRONG><a name="[100]"></a>tos_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tos_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_reset
</UL>

<P><STRONG><a name="[103]"></a>tos_list_empty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tos_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
</UL>

<P><STRONG><a name="[106]"></a>knl_object_verify</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tos_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_suspend
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_resume
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_destroy
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_create
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_delay_abort
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
</UL>

<P><STRONG><a name="[104]"></a>task_state_is_ready</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tos_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_suspend
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_resume
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_do_destroy
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_prio_change
</UL>

<P><STRONG><a name="[4b]"></a>task_default_walker</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, tos_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = task_default_walker &rArr; tos_task_curr_task_get &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_task_curr_task_get
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tos_task.o(.text)
</UL>
<P><STRONG><a name="[10e]"></a>tick_task_place</STRONG> (Thumb, 196 bytes, Stack size 40 bytes, tos_tick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = tick_task_place &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_add
</UL>

<P><STRONG><a name="[10f]"></a>tick_task_takeoff</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, tos_tick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = tick_task_takeoff &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_list_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_remove
</UL>

<P><STRONG><a name="[110]"></a>tos_list_empty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tos_tick.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_next_expires_get
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_update
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_task_takeoff
</UL>

<P><STRONG><a name="[114]"></a>timer_place</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, tos_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = timer_place &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_timer_start
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_update
</UL>

<P><STRONG><a name="[115]"></a>timer_takeoff</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, tos_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = timer_takeoff &rArr; tos_cpu_cpsr_restore
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_restore
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_cpu_cpsr_save
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_timer_stop
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_timer_start
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_timer_destroy
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_update
</UL>

<P><STRONG><a name="[11c]"></a>timer_change</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, tos_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;knl_object_verify
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_timer_period_change
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_timer_delay_change
</UL>

<P><STRONG><a name="[117]"></a>tos_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tos_timer.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_timer_destroy
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_timer_create
</UL>

<P><STRONG><a name="[119]"></a>knl_object_verify</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tos_timer.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_timer_stop
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_timer_start
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tos_timer_destroy
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_change
</UL>

<P><STRONG><a name="[126]"></a>_printf_core</STRONG> (Thumb, 660 bytes, Stack size 104 bytes, printf5.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$5
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
